/*
 * It's read in .FA file(s) which is contaning a DNA chain.
 * The program analyze it, and find the correct DNA parts in it.
 * From one .FA file you can tell the longest gene, how many gene is in th DNA,
 * ctg ratio, how many gene is longer than a given number, or have higher cgratio than 0.35.
 */
package allgene;

/**
 * This program is based on a Duke University's coursera.org course.
 * 
 * @author Bekor
 */

import java.io.*;
import edu.duke.*;

public class AllGene {
    
    public void testStorageFinder() {
        int longerthan = 0;
        int higherthan = 0;
        int cta = 0;
        
        //Read in directory with a bunch of files
        DirectoryResource dr = new DirectoryResource();
        for (File f : dr.selectedFiles()) {
            FileResource fr = new FileResource(f);
            String dna = fr.asString();
            dna = dna.toLowerCase();
            StorageResource result = new StorageResource();
            result = storeAll(dna);
            for(String link : result.data()) {
                cta++;
                //System.out.println("cout" + cta); // for debugging
                System.out.println(link); //print out the exact dna part chain
                System.out.println(link.length()); //print out the lenght of the dna chain
                //System.out.println("cgratio " + cgRatio(link)+ "\t"); // give back the c/g Ratio
                //System.out.println("cgR " + higherthan + "\t"); // just for information
                //System.out.println("CTA = " + cta_appear(link));
                //cta += cta_appear(link);
                if(link.length() > 60) {
                    longerthan++;
                    //System.out.println("longer than 60 " + link.length()+ "\t"); //for debugging
                     
                }
                if(cgRatio(link) > 0.35) {
                    higherthan++;
                    //System.out.println("cgR " + higherthan + "\n"); //for debugging
                }
            }
            maxLength(result);
            System.out.println("size = " + result.size());
            System.out.println("CTG = " + ctg_appear(dna));
            System.out.println("how many longer than 60: " + longerthan ); 
            System.out.println("how many higher cgratio than 0.35: " + higherthan ); 
        }
    }
    
    //Find every correct dna chain which start with ATG and test the length of the dna
    public StorageResource storeAll(String dna) {
        int start = 0;
        int num_prot = 0;
        StorageResource store = new StorageResource();
        while (true) {
            int begean = dna.indexOf("atg", start);
            if (begean == -1) {
                break;
            }
            System.out.println("starts at "+ begean);

            int ends = findStopIndex(dna, (begean+3)); // It try every ending
            if (ends == dna.length()) {
                start = begean + 3;
            }
            if (ends != dna.length()) {
                num_prot++;
                //if((last-start) > 3){
                
                store.add(dna.substring(begean, ends+3));
                System.out.println(dna.substring(begean, ends+3));
                start = ends + 3;
                //}
                //else {first = last + 3;}
            }
        }
        System.out.println("Total protein " + num_prot);
        return store;
    }
    
    // Specify the end 3 tag of the dna
    public int findStopIndex(String dna, int index) {
        int stop1 = dna.indexOf("tag",index);
        if ((stop1 == -1) || ((stop1-index) % 3 != 0)) {
            stop1 = dna.length();
        }
        int stop2 = dna.indexOf("tga", index);
        if((stop2 == -1) || ((stop2-index) % 3 != 0)) {
            stop2 = dna.length();
        }
        int stop3 = dna.indexOf("taa", index);
        if((stop3 == -1) || ((stop3-index) % 3 != 0)) {
            stop3 =  dna.length();
        }
        return Math.min(stop1, Math.min(stop2, stop3));
    }

    //Calculate the c/g ratio
    public float cgRatio(String dna) {
        float c = 0;
        float g = 0;
        for(int start = 0; start < dna.length(); start++) {
            if(dna.charAt(start) == 'c') {
                c++;
            }
            if(dna.charAt(start) == 'g') {
                g++;
            }
        }
        return ((c+g)/dna.length());
    }
    
    //It's find every ctg in the dna
    public int ctg_appear(String dna) {
        int ctgs = 0;
        String look = "ctg";
        int lastIndex = 0;
        while(lastIndex != -1){
            lastIndex = dna.indexOf(look, lastIndex);
            
            if(lastIndex != -1) {
                ctgs++;
                lastIndex += look.length();
            }
        }
        return ctgs;
    } 
    
    //Sort out the longest correct dna chain.
    public void maxLength(StorageResource store) {
        int maxsize = 0;
        for (String protein : store.data()) {
            if (protein.length() > maxsize) {
                maxsize = protein.length();
            }
        }
        System.out.println("Maximum gene length is "+maxsize);
    }
    
    
    /**
     * Call the test function
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        AllGene test = new AllGene();
        test.testStorageFinder();
    }
    
}